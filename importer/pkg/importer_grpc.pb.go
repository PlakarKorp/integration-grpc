// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: importer.proto

package importer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Importer_Init_FullMethodName        = "/importer.Importer/Init"
	Importer_Info_FullMethodName        = "/importer.Importer/Info"
	Importer_Scan_FullMethodName        = "/importer.Importer/Scan"
	Importer_OpenReader_FullMethodName  = "/importer.Importer/OpenReader"
	Importer_CloseReader_FullMethodName = "/importer.Importer/CloseReader"
	Importer_Close_FullMethodName       = "/importer.Importer/Close"
)

// ImporterClient is the client API for Importer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImporterClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanResponse], error)
	OpenReader(ctx context.Context, in *OpenReaderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OpenReaderResponse], error)
	CloseReader(ctx context.Context, in *CloseReaderRequest, opts ...grpc.CallOption) (*CloseReaderResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type importerClient struct {
	cc grpc.ClientConnInterface
}

func NewImporterClient(cc grpc.ClientConnInterface) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Importer_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Importer_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScanResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Importer_ServiceDesc.Streams[0], Importer_Scan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScanRequest, ScanResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_ScanClient = grpc.ServerStreamingClient[ScanResponse]

func (c *importerClient) OpenReader(ctx context.Context, in *OpenReaderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OpenReaderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Importer_ServiceDesc.Streams[1], Importer_OpenReader_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OpenReaderRequest, OpenReaderResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_OpenReaderClient = grpc.ServerStreamingClient[OpenReaderResponse]

func (c *importerClient) CloseReader(ctx context.Context, in *CloseReaderRequest, opts ...grpc.CallOption) (*CloseReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseReaderResponse)
	err := c.cc.Invoke(ctx, Importer_CloseReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, Importer_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImporterServer is the server API for Importer service.
// All implementations must embed UnimplementedImporterServer
// for forward compatibility.
type ImporterServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Scan(*ScanRequest, grpc.ServerStreamingServer[ScanResponse]) error
	OpenReader(*OpenReaderRequest, grpc.ServerStreamingServer[OpenReaderResponse]) error
	CloseReader(context.Context, *CloseReaderRequest) (*CloseReaderResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedImporterServer()
}

// UnimplementedImporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImporterServer struct{}

func (UnimplementedImporterServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedImporterServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedImporterServer) Scan(*ScanRequest, grpc.ServerStreamingServer[ScanResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedImporterServer) OpenReader(*OpenReaderRequest, grpc.ServerStreamingServer[OpenReaderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OpenReader not implemented")
}
func (UnimplementedImporterServer) CloseReader(context.Context, *CloseReaderRequest) (*CloseReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseReader not implemented")
}
func (UnimplementedImporterServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedImporterServer) mustEmbedUnimplementedImporterServer() {}
func (UnimplementedImporterServer) testEmbeddedByValue()                  {}

// UnsafeImporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImporterServer will
// result in compilation errors.
type UnsafeImporterServer interface {
	mustEmbedUnimplementedImporterServer()
}

func RegisterImporterServer(s grpc.ServiceRegistrar, srv ImporterServer) {
	// If the following call pancis, it indicates UnimplementedImporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Importer_ServiceDesc, srv)
}

func _Importer_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImporterServer).Scan(m, &grpc.GenericServerStream[ScanRequest, ScanResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_ScanServer = grpc.ServerStreamingServer[ScanResponse]

func _Importer_OpenReader_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenReaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImporterServer).OpenReader(m, &grpc.GenericServerStream[OpenReaderRequest, OpenReaderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_OpenReaderServer = grpc.ServerStreamingServer[OpenReaderResponse]

func _Importer_CloseReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).CloseReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_CloseReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).CloseReader(ctx, req.(*CloseReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Importer_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Importer_ServiceDesc is the grpc.ServiceDesc for Importer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Importer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "importer.Importer",
	HandlerType: (*ImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Importer_Init_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Importer_Info_Handler,
		},
		{
			MethodName: "CloseReader",
			Handler:    _Importer_CloseReader_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Importer_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _Importer_Scan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OpenReader",
			Handler:       _Importer_OpenReader_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "importer.proto",
}
